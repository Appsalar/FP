(define (l-prefix l)
  (define (helper k l)
    (if (null? l)
        '()
        (if (> k (car l))
            (cons (car l) (helper (car l) (cdr l)))
            '())))
  (cons (car l) (helper (car l) (cdr l)))) 

(define (longestDescending l)
  (define (helper res l)
    (if (null? l)
        res
        (helper (if (< (length res) (length (l-prefix l)))
                    (l-prefix l)
                    res)
                (cdr l))))
  (helper (l-prefix l) (cdr l)))

(define (begins-with? lst1 lst2)
  (cond ((and (null? lst1) (null? lst2)) #t)
        ((null? lst1) #t)
        ((null? lst2) #f)
        ((equal? (car lst1) (car lst2))
         (begins-with? (cdr lst1) (cdr lst2)))
        (else #f)))

(define (sublist? lst1 lst2)
  (cond ((null? lst2) (null? lst1))
        ((begins-with? lst1 lst2) #t)
        (else (sublist? lst1 (cdr lst2)))))

(define (transpose m)
  (if (null? (car m))
      '()
      (cons (map car m) (transpose (map cdr m)))))

(define (decartes lst1 lst2)
  (apply append (map (lambda (x)
                       (map (lambda(y) (cons x y)) lst2)) lst1)))